{
    "$schema": "https://schema.management.azure.com/schemas/2019-08-01/tenantDeploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "input": {
            "type": "object",
            "metadata": {
                "description": "input parameter for RESTful representation"
            }
        },
        "hobo": {
            "type": "object",
            "defaultValue": {
                "properties": {
                    "policyDefinitions": [
                    ],
                    "policySetDefinitions": [
                    ],
                    "roleDefinitions": [
                    ],
                    "policyAssignments": [
                    ]
                }
            }
        },
        "_artifactsLocation": {
            "type": "string",
            "defaultValue": "https://raw.githubusercontent.com/uday31in/AzOps/scopetest/src/",
            "metadata": {
                "description": "This is the link to the nested template that must to be accessible to ARM to be able to use as a part of nested deployment. 
                                Please feel free to use template hosted here or override with choice of your location.
                                If you chose to do so, please ensure future bug fixes are incorporated from above location to your private location."
            }
        },
        "_artifactsLocationSasToken": {
            "type": "string",
            "defaultValue": ""
        },
        "roleAssignmentEnabledForPolicy": {        
            "type": "bool",
            "defaultValue": true
        },
        "deploymentEnabledForPolicy": {        
            "type": "bool",
            "defaultValue": false
        },
        "remediationEnabledForPolicy": {        
            "type": "bool",
            "defaultValue": false
        },
        "debug":{        
            "type": "bool",
            "defaultValue": false
        }
    },
    "variables": {
        "debug": "[parameters('debug')]",
        "roleAssignmentEnabledForPolicy": "[parameters('roleAssignmentEnabledForPolicy')]",
        "deploymentEnabledForPolicy": "[parameters('deploymentEnabledForPolicy')]",
        "remediationEnabledForPolicy": "[parameters('remediationEnabledForPolicy')]",        
        "nestedTemplatesLocation": {
            "tenantTemplate": "[uri(parameters('_artifactsLocation'), concat('tenant.json', parameters('_artifactsLocationSasToken')))]", 
            "resourceTemplate": "[uri(parameters('_artifactsLocation'), concat('template.json', parameters('_artifactsLocationSasToken')))]"
        }, 
        

        "input": "[union(parameters('hobo'),parameters('input'))]",

        "scopeLookup": {
            "Microsoft.Resources/resourceGroups": "2019-05-10",            
            "/providers/Microsoft.Management/managementGroups": "[concat('Microsoft.Management/managementGroups/',parameters('input').name)]",
            "/subscriptions" : "[concat('/subscriptions/',parameters('input').name)]"
        },

        /*
            If Id property is present, use one and replace providers prefix, otherwise assume management group.
        */
        "scope": "[variables('scopeLookup')[parameters('input').Type]]",

        "Children": "[if(and(contains(parameters('input'), 'Children'),not(empty(parameters('input').Children))),parameters('input').Children,json('[]'))]",
        "policyDefinitions": "[if(and(contains(parameters('input'), 'properties'),contains(parameters('input').properties, 'policyDefinitions'),not(empty(parameters('input').properties.policyDefinitions))),parameters('input').properties.policyDefinitions,json('[]'))]",
        "policySetDefinitions": "[if(and(contains(parameters('input'), 'properties'),contains(parameters('input').properties, 'policySetDefinitions'),not(empty(parameters('input').properties.policySetDefinitions))),parameters('input').properties.policySetDefinitions,json('[]'))]",
        "roleDefinitions": "[if(and(contains(parameters('input'), 'properties'),contains(parameters('input').properties, 'roleDefinitions'),not(empty(parameters('input').properties.roleDefinitions))),parameters('input').properties.roleDefinitions,json('[]'))]",
        "policyAssignments": "[if(and(contains(parameters('input'), 'properties'),contains(parameters('input').properties, 'policyAssignments'),not(empty(parameters('input').properties.policyAssignments))),parameters('input').properties.policyAssignments,json('[]'))]",

        "blankTemplateEscaped": "{\"$schema\":\"https://schema.management.azure.com/schemas/2019-08-01/tenantDeploymentTemplate.json#\",\"contentVersion\":\"1.0.0.0\",\"parameters\":{},\"variables\":{},\"resources\":[],\"outputs\":{}}"
    },
    "resources": [
        {
            /*
                
                Intent: Upsert Management Group
                
                Required Parameters:
                    1. Name: Management Group Name
                    2. DisplayName: Management Group Display Name
                    3. ParentID - To Determine Where to place Management group. It could be root or any other valid ID of the Management Group.
                
                Scope: Tenant
                
                Condition: We have Parent ID available to ensure inadvertently place management group directly the root.

                Details: If ParentID do not exist, then it is a child and creation of Management group would have happened when parent's children were iterated upon.

                Change Log:
                    1. Initial Definition
            */
            "condition": "[and(contains(variables('scope'),'Microsoft.Management/managementGroups'), contains(parameters('input'),'ParentId'))]",
            "type": "Microsoft.Management/managementGroups",
            "apiVersion": "2020-02-01",
            "name": "[parameters('input').Name]",
            "properties": {
                "displayName": "[parameters('input').DisplayName]",
                "details": {
                    "parent": {
                        "id": "[if(contains(parameters('input'),'ParentId'),parameters('input').ParentId,'na-parentId')]"
                    }
                }
            }
        },
        {

            /*                
                Intent: Upsert 'Child' for the Management Group. Subscriptions do not have children and hence this resource will be filtered.
                
                Required Parameters:
                    1. Management Group Name
                    2. Management Group Display Name
                    3. ParentID: Where to place Management group
                
                Scope: Tenant
                
                Condition: If Management Group have Children object that is not null or empty.

                Details: Trigger Composite Deployment at the Tenant scope for every child for following:

                    1. IF Child contains 'Id' with a value that contains Microsoft.Management/managementGroups
                        a. Create Child Management Group. ParentID property is not required since we can establish parent automatically.
                        b. Trigger Nested Deployment of this same template 

                    2. IF Child contains 'Id' with a value that does NOT contain Microsoft.Management/managementGroups
                        a. Move Subscription under Management Group. Currently this functionality is disabled in Template due to Platform Bug. Workaround is move subscription manually under the right management group.
                        b. Trigger Nested Deployment for the Child

                Change Log: 
                    1. Initial Definition
            */

            "condition": "[not(empty(variables('Children')))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-07-01",
            "copy": {
                "name": "childmove",
                "count": "[length(variables('Children'))]"
            },
            "name": "[if(not(empty(variables('Children'))), concat('NorthStar','-',parameters('input').name,'-',variables('Children')[copyIndex()].Name), 'na-move')]",
            "dependsOn": [
                "[parameters('input').Name]",
                "policydefinitionloop",                
                "policySetDefinitions",                
                "policyassignmentloop",                
                "roleassignmentloop"
            ],
            "location": "[deployment().location]",
            "properties": {
                "mode": "incremental",
                "template": {
                    "$schema": "https://schema.management.azure.com/schemas/2019-08-01/tenantDeploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                    },
                    "resources": [
                        /*
                            Create Child Management Group
                        */
                        {
                            "condition": "[contains(variables('Children')[copyIndex()].Id ,'Microsoft.Management/managementGroups')]",
                            "type": "Microsoft.Management/managementGroups",
                            "apiVersion": "2020-02-01",
                            "name": "[variables('Children')[copyIndex()].Name]",
                            "properties": {
                                "displayName": "[variables('Children')[copyIndex()].DisplayName]",
                                "details": {
                                    "parent": {
                                        "id": "[concat('/providers/Microsoft.Management/managementGroups/', parameters('input').Name)]"
                                    }
                                }
                            }
                        },

                        /*
                            Start nested deployment for each child management group
                        */
                        {
                            "condition": "[contains(variables('Children')[copyIndex()].Type ,'Microsoft.Management/managementGroups')]",
                            "scope": "[concat(variables('Children')[copyIndex()].Name)]",
                            "type": "Microsoft.Resources/deployments",
                            "apiVersion": "2019-10-01",
                            "location": "[deployment().location]",
                            "name": "[concat('NorthStar-ChildMG-',variables('Children')[copyIndex()].Name)]",
                            "dependsOn": [
                                "[variables('Children')[copyIndex()].Name]"
                            ],
                            "properties": {
                                "expressionEvaluationOptions": {
                                    "scope": "outer"
                                },
                                "mode": "Incremental",
                                "templateLink": {
                                    "uri": "[variables('nestedTemplatesLocation').tenantTemplate]",
                                    "contentVersion": "1.0.0.0"
                                },
                                "parameters": {
                                     "input": {
                                        "value": {
                                            "Name": "[variables('Children')[copyIndex()].Name]",
                                            "Id": "[variables('Children')[copyIndex()].Id]",
                                            "Type": "/providers/Microsoft.Management/managementGroups",
                                            "Children": "[if(and(contains(variables('Children')[copyIndex()], 'Children'),not(empty(variables('Children')[copyIndex()].Children))),variables('Children')[copyIndex()].Children,json('[]'))]",
                                            "properties": {
                                                "policyAssignments": "[if(
                                                                            greaterOrEquals(length(
                                                                                                    if(
                                                                                                        and(contains(variables('Children')[copyIndex()], 'properties'),contains(variables('Children')[copyIndex()].properties, 'policyAssignments')),
                                                                                                        variables('Children')[copyIndex()].properties.policyAssignments,
                                                                                                        json('[]'))),1),
                                                                            union(variables('Children')[copyIndex()].properties.policyAssignments,variables('policyAssignments')),
                                                                            variables('policyAssignments')
                                                                        )]"
                                            }
                                        }
                                    },
                                    "_artifactsLocation": {
                                        "value": "[parameters('_artifactsLocation')]"
                                    },
                                    "_artifactsLocationSasToken": {
                                        "value": "[parameters('_artifactsLocationSasToken')]"
                                    },                 
                                    "roleAssignmentEnabledForPolicy": {
                                        "value": "[variables('roleAssignmentEnabledForPolicy')]"
                                    },
                                    "deploymentEnabledForPolicy": {
                                        "value": "[variables('deploymentEnabledForPolicy')]"
                                    },
                                    "remediationEnabledForPolicy": {
                                        "value": "[variables('remediationEnabledForPolicy')]"
                                    } 
                                }
                            }
                        },
                        /*
                            Ensure Subscription is under parent management group
                            This is commented out until platform supports capability.
                        /*
                        /*
                        {
                            "condition": "[not(contains(if(contains(variables('Children')[copyIndex()], 'Id'),variables('Children')[copyIndex()].Id, concat('Microsoft.Management/managementGroups/',variables('Children')[copyIndex()].Name)),'Microsoft.Management/managementGroups'))]",
                            "type": "Microsoft.Management/managementGroups/subscriptions",
                            "apiVersion": "2019-11-01",
                            "name": "[concat(parameters('input').Name,'/',variables('Children')[copyIndex()].Name)]",
                            "properties": {
                            }
                        },
                        */
                        /*
                            For each Subscription (i.e. Not management group), Start nested deployment
                        */
                        {
                            "condition": "[equals(toLower(variables('Children')[copyIndex()].Type) ,toLower('/subscriptions'))]",
                            "type": "Microsoft.Resources/deployments",
                            "apiVersion": "2019-10-01",
                            "location": "[deployment().location]",
                            "name": "[concat('Northstar-subscription-',variables('Children')[copyIndex()].Name)]",
                            "subscriptionId": "[variables('Children')[copyIndex()].Name]",
                            "properties": {
                                "expressionEvaluationOptions": {
                                    "scope": "outer"
                                },
                                "mode": "Incremental",
                                "templateLink": {
                                    "uri": "[variables('nestedTemplatesLocation').tenantTemplate]",
                                    "contentVersion": "1.0.0.0"
                                },
                               "parameters": {
                                    "input": {
                                        "value": {
                                            "Name": "[variables('Children')[copyIndex()].Name]",
                                            "Id": "[variables('Children')[copyIndex()].Id]",
                                            "Type": "/subscriptions",
                                            "properties": {
                                                "policyAssignments": "[if(
                                                                            greaterOrEquals(length(
                                                                                                    if(
                                                                                                        and(contains(variables('Children')[copyIndex()], 'properties'),contains(variables('Children')[copyIndex()].properties, 'policyAssignments')),
                                                                                                        variables('Children')[copyIndex()].properties.policyAssignments,
                                                                                                        json('[]'))),1),
                                                                            union(variables('Children')[copyIndex()].properties.policyAssignments,variables('policyAssignments')),
                                                                            variables('policyAssignments')
                                                                        )]"
                                            }
                                        }
                                    },
                                    "_artifactsLocation": {
                                        "value": "[parameters('_artifactsLocation')]"
                                    },
                                    "_artifactsLocationSasToken": {
                                        "value": "[parameters('_artifactsLocationSasToken')]"
                                    },                 
                                    "roleAssignmentEnabledForPolicy": {
                                        "value": "[variables('roleAssignmentEnabledForPolicy')]"
                                    },
                                    "deploymentEnabledForPolicy": {
                                        "value": "[variables('deploymentEnabledForPolicy')]"
                                    },
                                    "remediationEnabledForPolicy": {
                                        "value": "[variables('remediationEnabledForPolicy')]"
                                    }
                                }
                            }
                        }
                    ]
                }
            }
        },
        {
            /*

                Intent: Upsert 'PolicyDefinition' for the Management Group.
                
                Required Parameters (of PolicyDefinitions[] Object):

                    1. Name
                    2. ExtensionResourceType set to "Microsoft.Authorization/policyDefinitions",
                    3. Properties
                
                Scope: Tenant
                
                Condition: Non Empty policyDefinitions[] in Properties bag of Management Group.

                Details: Trigger Nested Deployment to create policy Definition.

                Change Log: 
                    1. Initial Definition
            */

            "condition": "[not(empty(variables('policyDefinitions')))]",
            "scope": "[if(
                            contains(variables('scope'),'Microsoft.Management/managementGroups'),
                            variables('scope'),
                            ''
                        )]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-10-01",
            "location": "[deployment().location]",
            "copy": {
                "name": "policydefinitionloop",
                "count": "[length(variables('policyDefinitions'))]"
            },
            "name": "[if(not(empty(variables('policyDefinitions'))), concat('PolicyDefinition-', variables('policyDefinitions')[copyIndex()].Name), 'na-mgmt-policydefinition')]",
            "dependsOn": [
                "[parameters('input').Name]"                
            ],
            "properties": {
                "expressionEvaluationOptions": {
                    "scope": "outer"
                },
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('nestedTemplatesLocation').resourceTemplate]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "input": {
                        "value": "[variables('policyDefinitions')[copyIndex()]]"
                    }
                }
            }
        },      
        {
            /*

                Intent: Upsert 'policySetDefinitions' for the Management Group.
                
                Required Parameters (of policySetDefinitions[] Object):

                    1. Name
                    2. ExtensionResourceType set to "Microsoft.Authorization/policySetDefinitions",
                    3. Properties
                
                Scope: Tenant
                
                Condition: Non Empty policySetDefinitions[] in Properties bag of Management Group.

                Details: Trigger Nested Deployment to create policy Definition.

                Change Log: 
                    1. Initial Definition
            */

            "condition": "[not(empty(variables('policyDefinitions')))]",
            "scope": "[if(
                            contains(variables('scope'),'Microsoft.Management/managementGroups'),
                            variables('scope'),
                            ''
                        )]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-10-01",
            "location": "[deployment().location]",
            "copy": {
                "name": "policySetDefinitions",
                "count": "[length(variables('policySetDefinitions'))]"
            },
            "name": "[if(not(empty(variables('policySetDefinitions'))), concat('PolicySetDefinitions-', variables('policyDefinitions')[copyIndex()].Name), 'na-mgmt-policySetDefinitions')]",
            "dependsOn": [
                "[parameters('input').Name]",                
                "policydefinitionloop"                
            ],
            "properties": {
                "expressionEvaluationOptions": {
                    "scope": "outer"
                },
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('nestedTemplatesLocation').resourceTemplate]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "input": {
                        "value": "[variables('policySetDefinitions')[copyIndex()]]"
                    }
                }
            }
        },
     
        {
            /*
                Management Group - Policy Assignment Loop
            */                         
            "condition": "[and(
                                not(empty(variables('policyAssignments'))),                                
                                contains(toLower(variables('policyAssignments')[0].Properties.scope),toLower(variables('scope'))) 
                            )]",
            "scope": "[if(
                            contains(variables('scope'),'Microsoft.Management/managementGroups'),
                            variables('scope'),
                            ''
                        )]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-09-01",
            "location": "[deployment().location]",
            "copy": {
                "name": "policyassignmentloop",
                "count": "[length(variables('policyAssignments'))]"
            },
            "dependsOn": [
                "policydefinitionloop",                
                "policySetDefinitions"                
            ],
            "name": "[if(not(empty(variables('policyAssignments'))), concat('PolicyAssignment-', variables('policyAssignments')[copyIndex()].Name), 'na-mgmt-policyassignment')]",
            "properties": {
                "expressionEvaluationOptions": {
                    "scope": "outer"
                },
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('nestedTemplatesLocation').resourceTemplate]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "input": {
                        "value": {
                            "name": "[variables('policyAssignments')[copyIndex()].Name]",
                            "ExtensionResourceType": "Microsoft.Authorization/policyAssignments",                                                            
                            "Location": "[if(contains(variables('policyAssignments')[copyIndex()],'Location'),
                                            variables('policyAssignments')[copyIndex()].Location,
                                            deployment().location
                                        )]",
                            "identity" : "[if(
                                                and(
                                                    not(empty(variables('policyAssignments'))),
                                                    equals(toLower(variables('policyAssignments')[copyIndex()].Properties.scope),toLower(variables('scope'))),
                                                    or(
                                                        contains(variables('policyAssignments')[copyIndex()].Properties.policyDefinitionId,'policySetDefinitions'),
                                                        and(
                                                            not(contains(variables('policyAssignments')[copyIndex()].Properties.policyDefinitionId,'policySetDefinitions')),
                                                            equals(toLower(reference(variables('policyAssignments')[copyIndex()].Properties.policyDefinitionId,'2018-05-01').policyRule.then.effect), toLower('deployIfNotExists'))
                                                        )
                                                    )
                                                ),
                                                json('{\"type\":\"SystemAssigned\"}'),
                                                json('null')
                                            )]",
                            "properties": "[variables('policyAssignments')[copyIndex()].Properties]"
                        }
                    }
                }
            }
        },
     
        {

            /*
                Management Group - Role Assignment Loop for Policy Assignment (System Assigned managed identity)
            */
            
            "condition": "[and(
                                variables('roleAssignmentEnabledForPolicy'),
                                not(empty(variables('policyAssignments'))),                                
                                contains(tolower(variables('policyAssignments')[0].Properties.scope),toLower(variables('scope'))) 
                            )]",
            "scope": "[if(
                            contains(variables('scope'),'Microsoft.Management/managementGroups'),
                            variables('scope'),
                            ''
                        )]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-10-01",
            "location": "[deployment().location]",
            "copy": {
                "name": "roleassignmentloop",
                "count": "[length(variables('policyAssignments'))]"
            },
            "dependsOn": [
                "policydefinitionloop",                
                "policySetDefinitions",                
                "policyassignmentloop"                
            ],
            "name": "[if(not(empty(variables('policyAssignments'))), concat('RoleAssignment-', variables('policyAssignments')[copyIndex()].Name), 'na-mgmt-roleAssignment')]",
            "properties": {
                "expressionEvaluationOptions": {
                    "scope": "outer"
                },
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('nestedTemplatesLocation').resourceTemplate]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "input": {
                        "value": {
                            "name": "[if(
                                        and(
                                            not(empty(variables('policyAssignments'))),
                                            equals(toLower(variables('policyAssignments')[copyIndex()].Properties.scope),toLower(variables('scope'))),
                                            contains(reference(concat(replace(variables('scope'),'/providers/',''),'/providers/Microsoft.Authorization/policyAssignments/', variables('policyAssignments')[copyIndex()].Name), '2018-05-01', 'Full' ),'identity'),
                                            or(
                                                contains(variables('policyAssignments')[copyIndex()].Properties.policyDefinitionId,'policySetDefinitions'),
                                                and(
                                                    not(contains(variables('policyAssignments')[copyIndex()].Properties.policyDefinitionId,'policySetDefinitions')),
                                                    equals(toLower(reference(variables('policyAssignments')[copyIndex()].Properties.policyDefinitionId,'2018-05-01').policyRule.then.effect), toLower('deployIfNotExists'))
                                                )
                                            )
                                        ),
                                        guid(toLower(reference(concat(replace(variables('scope'),'/providers/',''),'/providers/Microsoft.Authorization/policyAssignments/', variables('policyAssignments')[copyIndex()].Name), '2018-05-01', 'Full' ).identity.principalId)),
                                        'na'
                                    )]",
                            "ExtensionResourceType": "[if(
                                                            and(
                                                                not(empty(variables('policyAssignments'))),
                                                                equals(toLower(variables('policyAssignments')[copyIndex()].Properties.scope),toLower(variables('scope'))),
                                                                contains(reference(concat(replace(variables('scope'),'/providers/',''),'/providers/Microsoft.Authorization/policyAssignments/', variables('policyAssignments')[copyIndex()].Name), '2018-05-01', 'Full' ),'identity'),
                                                                or(
                                                                    contains(variables('policyAssignments')[copyIndex()].Properties.policyDefinitionId,'policySetDefinitions'),
                                                                    and(
                                                                        not(contains(variables('policyAssignments')[copyIndex()].Properties.policyDefinitionId,'policySetDefinitions')),
                                                                        equals(toLower(reference(variables('policyAssignments')[copyIndex()].Properties.policyDefinitionId,'2018-05-01').policyRule.then.effect), toLower('deployIfNotExists'))
                                                                    )
                                                                )
                                                            ),
                                                            'Microsoft.Authorization/roleAssignments',
                                                            'na'
                                                        )]",
                            "properties": {
                                "principalType": "ServicePrincipal",
                                "roleDefinitionId":  "[if(
                                                        and(
                                                            contains(variables('policyAssignments')[copyIndex()].Properties,'scope'),
                                                            contains(variables('policyAssignments')[copyIndex()].Properties,'policyDefinitionId'),
                                                            contains(reference(variables('policyAssignments')[copyIndex()].Properties.policyDefinitionId,'2018-05-01').policyRule.then,'details'),
                                                            contains(reference(variables('policyAssignments')[copyIndex()].Properties.policyDefinitionId,'2018-05-01').policyRule.then.details,'roleDefinitionIds'),
                                                            contains(reference(concat(replace(variables('scope'),'/providers/',''),'/providers/Microsoft.Authorization/policyAssignments/', variables('policyAssignments')[copyIndex()].Name), '2018-05-01', 'Full' ),'identity'),                                                            
                                                            or(
                                                                contains(variables('policyAssignments')[copyIndex()].Properties.policyDefinitionId,'policySetDefinitions'),
                                                                and(
                                                                    not(contains(variables('policyAssignments')[copyIndex()].Properties.policyDefinitionId,'policySetDefinitions')),
                                                                    equals(toLower(reference(variables('policyAssignments')[copyIndex()].Properties.policyDefinitionId,'2018-05-01').policyRule.then.effect), toLower('deployIfNotExists'))
                                                                )
                                                            )
                                                        ),
                                                        toLower(reference(variables('policyAssignments')[copyIndex()].Properties.policyDefinitionId,'2018-05-01').policyRule.then.details.roleDefinitionIds[0]),
                                                        concat('/providers/Microsoft.Authorization/roleDefinitions/', 'b24988ac-6180-42a0-ab88-20f7382dd24c')
                                                    )]",
                                "principalId": "[if(
                                                    and(
                                                        not(empty(variables('policyAssignments'))),
                                                        equals(toLower(variables('policyAssignments')[copyIndex()].Properties.scope),toLower(variables('scope'))),
                                                        contains(reference(concat(replace(variables('scope'),'/providers/',''),'/providers/Microsoft.Authorization/policyAssignments/', variables('policyAssignments')[copyIndex()].Name), '2018-05-01', 'Full' ),'identity'),
                                                        or(
                                                            contains(variables('policyAssignments')[copyIndex()].Properties.policyDefinitionId,'policySetDefinitions'),
                                                            and(
                                                                not(contains(variables('policyAssignments')[copyIndex()].Properties.policyDefinitionId,'policySetDefinitions')),
                                                                equals(toLower(reference(variables('policyAssignments')[copyIndex()].Properties.policyDefinitionId,'2018-05-01').policyRule.then.effect), toLower('deployIfNotExists'))
                                                            )
                                                        )
                                                    ),
                                                    toLower(reference(concat(replace(variables('scope'),'/providers/',''),'/providers/Microsoft.Authorization/policyAssignments/', variables('policyAssignments')[copyIndex()].Name), '2018-05-01', 'Full' ).identity.principalId),
                                                    'na'
                                                )]"
                            }
                        }
                    }
                }
            }
        }                     
    ],
    "outputs": {
        "scope": {
            "condition": "[bool('true')]",
            "type": "string",
            "value": "[variables('scope')]"
        },
        "policyAssignments": {
            "condition": "[bool('true')]",
            "type": "bool",
            "value": "[contains(variables('scope'),'Microsoft.Management/managementGroups')]"
        }
    }
}
