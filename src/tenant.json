{
    "$schema": "https://schema.management.azure.com/schemas/2019-08-01/tenantDeploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "input": {
            "type": "object",
            "metadata": {
                "description": "input parameter for RESTful representation"
            }
        },
        "hobo": {
            "type": "object",
            "defaultValue": {
                "properties": {
                    "policyDefinitions": [
                    ],
                    "policySetDefinitions": [
                    ],
                    "roleDefinitions": [
                    ],
                    "policyAssignments": [
                    ]
                }
            }
        },
        "_artifactsLocation": {
            "type": "string",
            "defaultValue": "https://raw.githubusercontent.com/uday31in/AzOps/scopetest/src/",
            "metadata": {
                "description": "This is the link to the nested template that must to be accessible to ARM to be able to use as a part of nested deployment. 
                                Please feel free to use template hosted here or override with choice of your location.
                                If you chose to do so, please ensure future bug fixes are incorporated from above location to your private location."
            }
        },
        "_artifactsLocationSasToken": {
            "type": "string",
            "defaultValue": ""
        },
        "roleAssignmentEnabledForPolicy": {        
            "type": "bool",
            "defaultValue": true
        },
        "deploymentEnabledForPolicy": {        
            "type": "bool",
            "defaultValue": false
        },
        "remediationEnabledForPolicy": {        
            "type": "bool",
            "defaultValue": false
        },
        "debug":{        
            "type": "bool",
            "defaultValue": false
        }
    },
    "variables": {
        "debug": "[parameters('debug')]",
        "roleAssignmentEnabledForPolicy": "[parameters('roleAssignmentEnabledForPolicy')]",
        "deploymentEnabledForPolicy": "[parameters('deploymentEnabledForPolicy')]",
        "remediationEnabledForPolicy": "[parameters('remediationEnabledForPolicy')]",        
        "nestedTemplatesLocation": {
            "tenantTemplate": "[uri(parameters('_artifactsLocation'), concat('tenant.json', parameters('_artifactsLocationSasToken')))]", 
            "resourceTemplate": "[uri(parameters('_artifactsLocation'), concat('template.json', parameters('_artifactsLocationSasToken')))]"
        }, 
        

        "input": "[union(parameters('hobo'),parameters('input'))]",
        /*
            If Id property is present, use one and replace providers prefix, otherwise assume management group.
        */
        "scope": "[if(contains(parameters('input'), 'Id'),replace(parameters('input').Id,'/providers/',''), concat('Microsoft.Management/managementGroups/',parameters('input').name))]",
        "Children": "[if(and(contains(parameters('input'), 'Children'),not(empty(parameters('input').Children))),parameters('input').Children,json('[]'))]",
        "policyDefinitions": "[if(and(contains(parameters('input'), 'properties'),contains(parameters('input').properties, 'policyDefinitions'),not(empty(parameters('input').properties.policyDefinitions))),parameters('input').properties.policyDefinitions,json('[]'))]",
        "policySetDefinitions": "[if(and(contains(parameters('input'), 'properties'),contains(parameters('input').properties, 'policySetDefinitions'),not(empty(parameters('input').properties.policySetDefinitions))),parameters('input').properties.policySetDefinitions,json('[]'))]",
        "roleDefinitions": "[if(and(contains(parameters('input'), 'properties'),contains(parameters('input').properties, 'roleDefinitions'),not(empty(parameters('input').properties.roleDefinitions))),parameters('input').properties.roleDefinitions,json('[]'))]",
        "policyAssignments": "[if(and(contains(parameters('input'), 'properties'),contains(parameters('input').properties, 'policyAssignments'),not(empty(parameters('input').properties.policyAssignments))),parameters('input').properties.policyAssignments,json('[]'))]",

        "blankTemplateEscaped": "{\"$schema\":\"https://schema.management.azure.com/schemas/2019-08-01/tenantDeploymentTemplate.json#\",\"contentVersion\":\"1.0.0.0\",\"parameters\":{},\"variables\":{},\"resources\":[],\"outputs\":{}}"
    },
    "resources": [
      
        {
            /*

                Intent: Upsert 'PolicyDefinition' for the Management Group.
                
                Required Parameters (of PolicyDefinitions[] Object):

                    1. Name
                    2. ExtensionResourceType set to "Microsoft.Authorization/policyDefinitions",
                    3. Properties
                
                Scope: Tenant
                
                Condition: Non Empty policyDefinitions[] in Properties bag of Management Group.

                Details: Trigger Nested Deployment to create policy Definition.

                Change Log: 
                    1. Initial Definition
            */

            "condition": "[and(
                                not(empty(variables('policyDefinitions'))),                                
                            )]",
            "scope": "[if(
                            contains(variables('scope'),'Microsoft.Management/managementGroups'),
                            variables('scope'),
                            ''
                        )]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-10-01",
            "location": "[deployment().location]",
            "copy": {
                "name": "policydefinitionloop",
                "count": "[length(variables('policyDefinitions'))]"
            },
            "name": "[if(not(empty(variables('policyDefinitions'))), concat('PolicyDefinition-', variables('policyDefinitions')[copyIndex()].Name), 'na-mgmt-policydefinition')]",            
            "properties": {
                "expressionEvaluationOptions": {
                    "scope": "outer"
                },
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('nestedTemplatesLocation').resourceTemplate]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "input": {
                        "value": "[variables('policyDefinitions')[copyIndex()]]"
                    }
                }
            }
        },
          
        {
            /*
                Management Group - Policy Assignment Loop
            */                         
            "condition": "[and(
                                not(empty(variables('policyAssignments'))),                                
                                equals(toLower(variables('policyAssignments')[0].Properties.scope),toLower(concat('/providers/',variables('scope')))) 
                            )]",
            "scope": "[if
                            (contains(variables('scope'),'Microsoft.Management/managementGroups'),
                            variables('scope'),
                            ''
                        )]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-09-01",
            "location": "[deployment().location]",
            "copy": {
                "name": "policyassignmentloop",
                "count": "[length(variables('policyAssignments'))]"
            },
            "dependsOn": [
                "policydefinitionloop"
            ],
            "name": "[if(not(empty(variables('policyAssignments'))), concat('PolicyAssignment-', variables('policyAssignments')[copyIndex()].Name), 'na-mgmt-policyassignment')]",
            "properties": {
                "expressionEvaluationOptions": {
                    "scope": "outer"
                },
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('nestedTemplatesLocation').resourceTemplate]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "input": {
                        "value": {
                            "name": "[variables('policyAssignments')[copyIndex()].Name]",
                            "ExtensionResourceType": "Microsoft.Authorization/policyAssignments",                                                            
                            "Location": "[if(contains(variables('policyAssignments')[copyIndex()],'Location'),
                                            variables('policyAssignments')[copyIndex()].Location,
                                            deployment().location
                                        )]",
                            "identity" : "[if(
                                                and(
                                                    not(empty(variables('policyAssignments'))),
                                                    equals(toLower(variables('policyAssignments')[copyIndex()].Properties.scope),toLower(concat('/providers/',variables('scope')))),
                                                    or(
                                                        contains(variables('policyAssignments')[copyIndex()].Properties.policyDefinitionId,'policySetDefinitions'),
                                                        and(
                                                            not(contains(variables('policyAssignments')[copyIndex()].Properties.policyDefinitionId,'policySetDefinitions')),
                                                            equals(toLower(reference(variables('policyAssignments')[copyIndex()].Properties.policyDefinitionId,'2018-05-01').policyRule.then.effect), toLower('deployIfNotExists'))
                                                        )
                                                    )
                                                ),
                                                json('{\"type\":\"SystemAssigned\"}'),
                                                json('null')
                                            )]",
                            "properties": "[variables('policyAssignments')[copyIndex()].Properties]"
                        }
                    }
                }
            }
        }       
    ],
    "outputs": {
        "scope": {
            "condition": "[bool('true')]",
            "type": "string",
            "value": "[variables('scope')]"
        },
        "policyAssignments": {
            "condition": "[bool('true')]",
            "type": "bool",
            "value": "[contains(variables('scope'),'Microsoft.Management/managementGroups')]"
        }
    }
}
