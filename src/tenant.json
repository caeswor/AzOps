{
    "$schema": "https://schema.management.azure.com/schemas/2019-08-01/tenantDeploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "input": {
            "type": "object",
            "metadata": {
                "description": "input parameter for RESTful representation"
            }
        },
        "hobo": {
            "type": "object",
            "defaultValue": {
                "DisplayName": null,
                "ParentId": null,
                "Children": null,
                "properties": {
                    "policyDefinitions": [
                    ],
                    "roleDefinitions": [
                    ],
                    "policyAssignments": [
                    ]
                }
            }
        }
    },
    "variables": {
        "debug": true,
        "input": "[union(parameters('hobo'),parameters('input'))]",
        /*
            If Id proeprty is present, use one and repalce providers prefix, otherwise assume management group 
        */
        "scope": "[if(contains(parameters('input'), 'Id'),replace(parameters('input').Id,'/providers',''), concat('Microsoft.Management/managementGroups/',parameters('input').name))]",
        "Children": "[if(and(contains(parameters('input'), 'Children'),not(empty(parameters('input').Children))),parameters('input').Children,'')]",
        "policyDefinitions": "[if(and(contains(parameters('input'), 'properties'),contains(parameters('input').properties, 'policyDefinitions')),parameters('input').properties.policyDefinitions,'')]",
        "roleDefinitions": "[if(and(contains(parameters('input'), 'properties'),contains(parameters('input').properties, 'roleDefinitions')),parameters('input').properties.roleDefinitions,'')]",
        "policyAssignments": "[if(and(contains(parameters('input'), 'properties'),contains(parameters('input').properties, 'policyAssignments')),parameters('input').properties.policyAssignments,'')]"

    },
    "resources": [
        {
            /*
                If scope container management group and parentID property exists.
                If ParentID do not exist, then it is a child and creation of managemeent group would have happended when parent's children were iterated upon.
            */
            "condition": "[and(contains(variables('scope'),'Microsoft.Management/managementGroups'), contains(parameters('input'),'ParentId'))]",
            "type": "Microsoft.Management/managementGroups",
            "apiVersion": "2019-11-01",
            "name": "[parameters('input').Name]",
            "properties": {
                "displayName": "[parameters('input').DisplayName]",
                "details": {
                    "parent": {
                        "id": "[if(contains(parameters('input'), 'ParentId'),parameters('input').ParentId ,tenantResourceId('Microsoft.Management/managementGroups/', parameters('input').Name))]"
                    }
                }
            }
        },
        {
            "condition": "[not(empty(variables('Children')))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-07-01",
            "copy": {
                "name": "childmove",
                "count": "[length(variables('Children'))]"
            },
            "name": "[if(not(empty(variables('Children'))), concat('childmove-', variables('Children')[copyIndex()].Name), 'na-move')]",
            "dependsOn": [
                "[parameters('input').Name]",
                "policydefinitionloop",
                "policydefinitionloop-subscription",
                "policyassignmentloop",
                "policyassignmentloop-subscription",
                "roleassignmentloop",
                "roleassignmentloop-subscription"
            ],
            "location": "northeurope",
            "properties": {
                "mode": "incremental",
                "template": {
                    "$schema": "https://schema.management.azure.com/schemas/2019-08-01/tenantDeploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                    },
                    "resources": [
                        {
                            "condition": "[contains(variables('Children')[copyIndex()].Id ,'Microsoft.Management/managementGroups')]",
                            "type": "Microsoft.Management/managementGroups",
                            "apiVersion": "2019-11-01",
                            "name": "[variables('Children')[copyIndex()].Name]",
                            "properties": {
                                "displayName": "[variables('Children')[copyIndex()].DisplayName]",
                                "details": {
                                    "parent": {
                                        "id": "[concat('/providers/Microsoft.Management/managementGroups/', parameters('input').Name)]"
                                    }
                                }
                            }
                        },
                        {
                            "condition": "[contains(variables('Children')[copyIndex()].Id ,'Microsoft.Management/managementGroups')]",
                            "scope": "[if(contains(variables('Children')[copyIndex()], 'Id'),replace(replace(variables('Children')[copyIndex()].Id,'/providers',''),'/subscriptions',''), concat('Microsoft.Management/managementGroups/',variables('Children')[copyIndex()].name))]",
                            "type": "Microsoft.Resources/deployments",
                            "apiVersion": "2019-10-01",
                            "location": "northeurope",
                            "name": "[concat('Northstar-mgmt-',variables('Children')[copyIndex()].Name)]",
                            "dependsOn": [
                                "[variables('Children')[copyIndex()].Name]"
                            ],
                            "properties": {
                                "expressionEvaluationOptions": {
                                    "scope": "inner"
                                },
                                "mode": "Incremental",
                                "templateLink": {
                                    "uri": "https://raw.githubusercontent.com/uday31in/AzOps/master/src/tenant.json",
                                    "contentVersion": "1.0.0.0"
                                },
                                "parameters": {
                                    "input": {
                                        "value": "[variables('Children')[copyIndex()]]"
                                    }
                                }
                            }
                        },
                        {
                            "condition": "[not(contains(if(contains(variables('Children')[copyIndex()], 'Id'),variables('Children')[copyIndex()].Id, concat('Microsoft.Management/managementGroups/',variables('Children')[copyIndex()].Name)),'Microsoft.Management/managementGroups'))]",
                            "type": "Microsoft.Management/managementGroups/subscriptions",
                            "apiVersion": "2020-02-01",
                            "name": "[concat(parameters('input').Name,'/',variables('Children')[copyIndex()].Name)]",
                            "properties": {
                            }
                        },
                        {
                            "condition": "[not(contains(variables('Children')[copyIndex()].Id ,'Microsoft.Management/managementGroups'))]",
                            "type": "Microsoft.Resources/deployments",
                            "apiVersion": "2019-10-01",
                            "location": "northeurope",
                            "name": "[concat('Northstar-sub-',variables('Children')[copyIndex()].Name)]",
                            "properties": {
                                "expressionEvaluationOptions": {
                                    "scope": "outer"
                                },
                                "mode": "Incremental",
                                "templateLink": {
                                    "uri": "https://raw.githubusercontent.com/uday31in/AzOps/master/src/tenant.json",
                                    "contentVersion": "1.0.0.0"
                                },
                                "parameters": {
                                    "input": {
                                        "value": "[variables('Children')[copyIndex()]]"
                                    }
                                }
                            }
                        }
                    ]
                }
            }
        },
        {
            "condition": "[and(not(empty(variables('policyDefinitions'))),contains(variables('scope'),'Microsoft.Management/managementGroups'))]",
            "scope": "[variables('scope')]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-10-01",
            "location": "northeurope",
            "copy": {
                "name": "policydefinitionloop",
                "count": "[length(variables('policyDefinitions'))]"
            },
            "name": "[if(not(empty(variables('policyDefinitions'))), concat('policydefinition-', variables('policyDefinitions')[copyIndex()].Name), 'na-mgmt-policydefinition')]",
            "dependsOn": [
                "[parameters('input').Name]"
            ],
            "properties": {
                "expressionEvaluationOptions": {
                    "scope": "inner"
                },
                "mode": "Incremental",
                "templateLink": {
                    "uri": "https://raw.githubusercontent.com/uday31in/AzOps/master/src/template.json",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "input": {
                        "value": "[variables('policyDefinitions')[copyIndex()]]"
                    }
                }
            }
        },
        {
            /*
             Subscription deployment cannot be invoked with scope property unlike management group.
             This resoruce is uses subscriptionId property instead.
            */
            "condition": "[and(not(empty(variables('policyDefinitions'))),contains(variables('scope'),'subscriptions'))]",
            "subscriptionId": "[parameters('input').Name]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-10-01",
            "location": "northeurope",
            "copy": {
                "name": "policydefinitionloop-subscription",
                "count": "[length(variables('policyDefinitions'))]"
            },
            "name": "[if(not(empty(variables('policyDefinitions'))), concat('policydefinition-sub-', variables('policyDefinitions')[copyIndex()].Name), 'na-sub-policydefinition')]",
            "dependsOn": [
                "[parameters('input').Name]"
            ],
            "properties": {
                "expressionEvaluationOptions": {
                    "scope": "inner"
                },
                "mode": "Incremental",
                "templateLink": {
                    "uri": "https://raw.githubusercontent.com/uday31in/AzOps/master/src/template.json",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "input": {
                        "value": "[variables('policyDefinitions')[copyIndex()]]"
                    }
                }
            }
        },
        {
            "condition": "[and(not(empty(variables('policyAssignments'))),contains(variables('scope'),'Microsoft.Management/managementGroups'))]",
            "scope": "[variables('scope')]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-09-01",
            "location": "northeurope",
            "copy": {
                "name": "policyassignmentloop",
                "count": "[length(variables('policyAssignments'))]"
            },
            "dependsOn": [
                "policydefinitionloop",
                "policydefinitionloop-subscription"
            ],
            "name": "[if(not(empty(variables('policyAssignments'))), concat('policyassignment-', variables('policyAssignments')[copyIndex()].Name), 'na-mgmt-policyassignment')]",
            "properties": {
                "expressionEvaluationOptions": {
                    "scope": "inner"
                },
                "mode": "Incremental",
                "templateLink": {
                    "uri": "https://raw.githubusercontent.com/uday31in/AzOps/master/src/template.json",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "input": {
                        "value": "[variables('policyAssignments')[copyIndex()]]"
                    }
                }
            }
        },
        {
            /*
             Subscription deployment cannot be invoked with scope property unlike management group.
             This resoruce is uses subscriptionId property instead.
            */
            "condition": "[and(not(empty(variables('policyAssignments'))),contains(variables('scope'),'subscriptions'))]",
            "subscriptionId": "[parameters('input').Name]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-09-01",
            "location": "northeurope",
            "copy": {
                "name": "policyassignmentloop-subscription",
                "count": "[length(variables('policyAssignments'))]"
            },
            "dependsOn": [
                "policydefinitionloop",
                "policydefinitionloop-subscription"
            ],
            "name": "[if(not(empty(variables('policyAssignments'))), concat('policyassignment-sub-', variables('policyAssignments')[copyIndex()].Name), 'na-sub-policyassignment')]",
            "properties": {
                "expressionEvaluationOptions": {
                    "scope": "inner"
                },
                "mode": "Incremental",
                "templateLink": {
                    "uri": "https://raw.githubusercontent.com/uday31in/AzOps/master/src/template.json",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "input": {
                        "value": "[variables('policyAssignments')[copyIndex()]]"
                    }
                }
            }
        },
        {
            "condition": "[and(not(empty(variables('policyAssignments'))),contains(variables('scope'),'Microsoft.Management/managementGroups'))]",
            "scope": "[variables('scope')]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-10-01",
            "location": "northeurope",
            "copy": {
                "name": "roleassignmentloop",
                "count": "[length(variables('policyAssignments'))]"
            },
            "dependsOn": [
                "policydefinitionloop",
                "policydefinitionloop-subscription",
                "policyassignmentloop",
                "policyassignmentloop-subscription"
            ],
            "name": "[if(not(empty(variables('policyAssignments'))), concat('roleAssignment-', variables('policyAssignments')[copyIndex()].Name), 'na-mgmt-roleAssignment')]",
            "properties": {
                "expressionEvaluationOptions": {
                    "scope": "inner"
                },
                "mode": "Incremental",
                "templateLink": {
                    "uri": "https://raw.githubusercontent.com/uday31in/AzOps/master/src/template.json",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "input": {
                        "value": {
                            "name": "[if(not(empty(variables('policyAssignments'))),guid(toLower(reference(concat(variables('scope'),'/providers/Microsoft.Authorization/policyAssignments/', variables('policyAssignments')[copyIndex()].Name), '2018-05-01', 'Full' ).identity.principalId)),'na')]",
                            "ExtensionResourceType": "Microsoft.Authorization/roleAssignments",
                            "properties": {
                                "principalType": "ServicePrincipal",
                                "roleDefinitionId": "[concat('/providers/Microsoft.Authorization/roleDefinitions/', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                                "principalId": "[if(not(empty(variables('policyAssignments'))),toLower(reference(concat(variables('scope'),'/providers/Microsoft.Authorization/policyAssignments/', variables('policyAssignments')[copyIndex()].Name), '2018-05-01', 'Full' ).identity.principalId),'na')]"
                            }
                        }
                    }
                }
            }
        },
        {
            /*
             Subscription deployment cannot be invoked with scope property unlike management group.
             This resoruce is uses subscriptionId property instead.
            */
            "condition": "[and(not(empty(variables('policyAssignments'))),contains(variables('scope'),'subscriptions'))]",
            "subscriptionId": "[parameters('input').Name]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-10-01",
            "location": "northeurope",
            "copy": {
                "name": "roleassignmentloop-subscription",
                "count": "[length(variables('policyAssignments'))]"
            },
            "dependsOn": [
                "policydefinitionloop",
                "policydefinitionloop-subscription",
                "policyassignmentloop",
                "policyassignmentloop-subscription"
            ],
            "name": "[if(not(empty(variables('policyAssignments'))), concat('roleAssignment-sub-', variables('policyAssignments')[copyIndex()].Name), 'na-sub-roleAssignment')]",
            "properties": {
                "expressionEvaluationOptions": {
                    "scope": "inner"
                },
                "mode": "Incremental",
                "templateLink": {
                    "uri": "https://raw.githubusercontent.com/uday31in/AzOps/master/src/template.json",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "input": {
                        "value": {
                            "name": "[if(not(empty(variables('policyAssignments'))),guid(toLower(reference(concat(variables('scope'),'/providers/Microsoft.Authorization/policyAssignments/', variables('policyAssignments')[copyIndex()].Name), '2018-05-01', 'Full' ).identity.principalId)),'na')]",
                            "ExtensionResourceType": "Microsoft.Authorization/roleAssignments",
                            "properties": {
                                "principalType": "ServicePrincipal",
                                "roleDefinitionId": "[concat('/providers/Microsoft.Authorization/roleDefinitions/', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                                "principalId": "[if(not(empty(variables('policyAssignments'))),toLower(reference(concat(variables('scope'),'/providers/Microsoft.Authorization/policyAssignments/', variables('policyAssignments')[copyIndex()].Name), '2018-05-01', 'Full' ).identity.principalId),'na')]"
                            }
                        }
                    }
                }
            }
        },

        {
            "condition": "[and(not(empty(variables('policyAssignments'))),contains(variables('scope'),'Microsoft.Management/managementGroups'))]",
            "scope": "[variables('scope')]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-10-01",
            "location": "northeurope",
            "copy": {
                "name": "policyremediationsloop",
                "count": "[length(variables('policyAssignments'))]"
            },
            "dependsOn": [
                "policydefinitionloop",
                "policydefinitionloop-subscription",
                "policyassignmentloop",
                "policyassignmentloop-subscription",
                "roleassignmentloop",
                "roleassignmentloop-subscription"
            ],
            "name": "[if(not(empty(variables('policyAssignments'))), concat('policyremediations-', variables('policyAssignments')[copyIndex()].Name), 'na-mgmt-policyremediations')]",
            "properties": {
                "expressionEvaluationOptions": {
                    "scope": "inner"
                },
                "mode": "Incremental",
                "templateLink": {
                    "uri": "https://raw.githubusercontent.com/uday31in/AzOps/master/src/template.json",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "input": {
                        "value": {
                            "name": "[variables('policyAssignments')[copyIndex()].Name]",
                            "ExtensionResourceType": "Microsoft.PolicyInsights/remediations",
                            "properties": {
                                "policyAssignmentId": "[concat('/providers/',variables('scope'),'/providers/Microsoft.Authorization/policyAssignments/', variables('policyAssignments')[copyIndex()].Name)]"
                            }
                        }
                    }
                }
            }
        },

        {
            /*
             Subscription deployment cannot be invoked with scope property unlike management group.
             This resoruce is uses subscriptionId property instead.
            */
            "condition": "[and(not(empty(variables('policyAssignments'))),contains(variables('scope'),'subscriptions'))]",
            "subscriptionId": "[parameters('input').Name]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-10-01",
            "location": "northeurope",
            "copy": {
                "name": "policyremediationsloop-subscription",
                "count": "[length(variables('policyAssignments'))]"
            },
            "dependsOn": [
                "policydefinitionloop",
                "policydefinitionloop-subscription",
                "policyassignmentloop",
                "policyassignmentloop-subscription",
                "roleassignmentloop",
                "roleassignmentloop-subscription"
            ],
            "name": "[if(not(empty(variables('policyAssignments'))), concat('policyremediations-sub-', variables('policyAssignments')[copyIndex()].Name), 'na-sub-policyremediations')]",
            "properties": {
                "expressionEvaluationOptions": {
                    "scope": "inner"
                },
                "mode": "Incremental",
                "templateLink": {
                    "uri": "https://raw.githubusercontent.com/uday31in/AzOps/master/src/template.json",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "input": {
                        "value": {
                            "name": "[variables('policyAssignments')[copyIndex()].Name]",
                            "ExtensionResourceType": "Microsoft.PolicyInsights/remediations",
                            "properties": {
                                "policyAssignmentId": "[concat(variables('scope'),'/providers/Microsoft.Authorization/policyAssignments/', variables('policyAssignments')[copyIndex()].Name)]"
                            }
                        }
                    }
                }
            }
        },
        {
            "condition": "[and(not(empty(variables('roleDefinitions'))),contains(variables('scope'),'Microsoft.Management/managementGroups'))]",
            "scope": "[variables('scope')]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-10-01",
            "location": "northeurope",
            "copy": {
                "name": "roledef",
                "count": "[length(variables('roleDefinitions'))]"
            },
            "name": "[if(not(empty(variables('roleDefinitions'))), concat('roleDefinitions-', variables('roleDefinitions')[copyIndex()].Name), 'na-mgmt-roleDefinitions')]",
            "properties": {
                "expressionEvaluationOptions": {
                    "scope": "inner"
                },
                "mode": "Incremental",
                "templateLink": {
                    "uri": "https://raw.githubusercontent.com/uday31in/AzOps/master/src/template.json",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "input": {
                        "value": "[variables('roleDefinitions')[copyIndex()]]"
                    }

                }
            }
        },
        {
            /*
             Subscription deployment cannot be invoked with scope property unlike management group.
             This resoruce is uses subscriptionId property instead.
            */
            "condition": "[and(not(empty(variables('roleDefinitions'))),contains(variables('scope'),'subscriptions'))]",
            "subscriptionId": "[parameters('input').Name]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-10-01",
            "location": "northeurope",
            "copy": {
                "name": "roledef-subscription",
                "count": "[length(variables('roleDefinitions'))]"
            },
            "name": "[if(not(empty(variables('roleDefinitions'))), concat('roleDefinitions-sub-', variables('roleDefinitions')[copyIndex()].Name), 'na-sub-roleDefinitions')]",
            "properties": {
                "expressionEvaluationOptions": {
                    "scope": "inner"
                },
                "mode": "Incremental",
                "templateLink": {
                    "uri": "https://raw.githubusercontent.com/uday31in/AzOps/master/src/template.json",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "input": {
                        "value": "[variables('roleDefinitions')[copyIndex()]]"
                    }
                }
            }
        }

    ],
    "outputs": {
        "scope": {
            "condition": "[bool('true')]",
            "type": "string",
            "value": "[variables('scope')]"
        },
        "policyAssignments": {
            "condition": "[bool('true')]",
            "type": "bool",
            "value": "[contains(variables('scope'),'Microsoft.Management/managementGroups')]"
        }
    }
}